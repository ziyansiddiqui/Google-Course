Overview
You must complete a series of tasks within the allocated time period. Instead of following step-by-step instructions, you'll be given a scenario and a set of tasks - you figure out how to complete it on your own! An automated scoring system (shown on this page) will provide feedback on whether you have completed your tasks correctly.

To score 100% you must complete all tasks within the time period!

When you take a Challenge Lab, you will not be taught Google Cloud concepts. To build the solution to the challenge presented, use skills learned from the labs in the quest this challenge lab is part of. You will be expected to extend your learned skills; you will be expected to change default values, but new concepts will not be introduced.

This lab is only recommended for students who have completed the labs in the Cloud Architecture Quest.

Please make sure you review the labs in the Cloud Architecture quest before starting this lab!
Topics tested:

Complete the production application environment.
Ensure monitoring and alerts enabled on key development components.
Test the Spinnaker CI/CD deployed environment is working as expected.
Are you up for the challenge?

Do not wait for the lab to provision! You can complete tasks 1 and 2 before the lab provisioning has ended, just ensure the jumphost exists.
Setup
Before you click the Start Lab button
Read these instructions. Labs are timed and you cannot pause them. The timer, which starts when you click Start Lab, shows how long Google Cloud resources will be made available to you.

This Qwiklabs hands-on lab lets you do the lab activities yourself in a real cloud environment, not in a simulation or demo environment. It does so by giving you new, temporary credentials that you use to sign in and access Google Cloud for the duration of the lab.

What you need
To complete this lab, you need:

Access to a standard internet browser (Chrome browser recommended).
Time to complete the lab.
Note: If you already have your own personal Google Cloud account or project, do not use it for this lab.

Note: If you are using a Pixelbook, open an Incognito window to run this lab.

Challenge scenario
You have started a new role as a Cloud Architect for Jooli Inc. You are expected to help design and manage the infrastructure at Jooli. Common tasks revolve around designing environments for the various projects within the Jooli Inc. family but also include provisioning resources for projects.

You are expected to have the skills and knowledge for these tasks, so don't expect step-by-step guides.

You have been asked to assist the kraken team complete setting up their product development environment. The previous Cloud Architect working with the kraken team was unfortunately too curious about if krakens were real or not, and has gone missing after venturing out into the open sea last weekend in search of such a beast.

Jooli Inc. management has supreme faith in your abilities, don't let them down! (Seriously, they don't need the dates to slip further).

The kraken team are building a next generation tool and they will host the application on Kubernetes. The project source code is stored in Cloud Source Repositories, with Spinnaker building and deploying any changes into the build Kubernetes environment.

Some Jooli Inc. standards you should follow:

Create all resources in the us-east1 region and us-east1-b zone, unless otherwise directed.

Use the project VPCs.

Naming is normally team-resource, e.g. an instance could be named kraken-webserver1.

Allocate cost effective resource sizes. Projects are monitored and excessive resource use will result in the containing project's termination (and possibly yours), so beware. This is the guidance the monitoring team is willing to share; unless directed, use n1-standard-1.

Your challenge
As soon as you sit down at your desk and open your new laptop you receive the following request to complete these tasks. Good luck!

Do not wait for the lab to provision! You can complete tasks 1 and 2 before the lab provisioning has ended, just ensure the jumphost exists.
Task 1: Create the production environment
The previous Cloud Architect had written the Deployment Manager configuration to build the network for kraken's production environment. You can find the DM configuration on your jumphost in /work/dm. Create the network using the Deployment Manager configuration (/work/dm/prod-network.yaml and /work/dm/prod-network.jinja). Make sure you review the configuration before deploying it.

You will also need to create the Kubernetes environment. The application is already created and in the Container Repository.

Create a two (2) node cluster called kraken-prod in the kraken-prod-vpc (remember to use --num-nodes to create 2 nodes only).
Use kubectl with the files in /work/k8s to create the frontend and backend deployments and services (which will expose the frontend service via a load balancer).
The architecture is simple, the diagram below describes the environment. The new work you need to complete (VPC and Kubernetes cluster with services) is in the red box.

lab-architecture.png

Click Check my progress to verify the objective.
Create the Production Environment

If you don't get a green check mark, click on the Score fly-out on the top right and click Run Step on the relevant step. A hint pop up opens to give you advice.
Task 2: Setup the Admin instance
You need to set up an admin machine for the team to use.

Once you create the kraken-prod-vpc, you will need to add an instance called kraken-admin, a network interface in kraken-mgmt-subnet and another in kraken-prod-subnet.
You need to monitor kraken-admin and if CPU utilization is over 50% for more than a minute you need to send an email to yourself, as admin of the system.
Click Check my progress to verify the objective.
Setup the Admin instance

If you don't get a green check mark, click on the Score fly-out on the top right and click Run Step on the relevant step. A hint pop up opens to give you advice.
Task 3: Verify the Spinnaker deployment
Do not start this task until the lab has completed provisioning the lab resources.
The previous architect set up Spinnaker in kraken-build-vpc. Please connect to the Spinnaker console and verify that the built resources are working.

To access the Spinnaker console use Cloud Shell and kubectl to port forward the spin-deck pod from port 9000 to 8080 and then use Cloud Shell's web preview.

You must test that a change to the source code will result in the automated deployment of the new build. You should pull the sample-app repository to make the changes. Make sure you push a new, updated, tag.

Click Check my progress to verify the objective.
Verify the Spinnaker deployment

If you don't get a green check mark, click on the Score fly-out on the top right and click Run Step on the relevant step. A hint pop up opens to give you advice.
Congratulations!



Task 1: Create Production Environment


cd /work/dm

sed -i s/SET_REGION/us-east1/g prod-network.yaml

gcloud deployment-manager deployments create prod-network --config=prod-network.yaml




gcloud config set compute/zone us-east1-b

gcloud container clusters create kraken-prod \
          --num-nodes 2 \
          --network kraken-prod-vpc \
          --subnetwork kraken-prod-subnet

gcloud container clusters get-credentials kraken-prod

cd /work/k8s

for F in $(ls *.yaml); do kubectl create -f $F; done




Task 2: Configure the admin host


Create kraken-admin


gcloud config set compute/zone us-east1-b

gcloud compute instances create kraken-admin --network-interface="subnet=kraken-mgmt-subnet" --network-interface="subnet=kraken-prod-subnet"


Create alert:
Open monitoring

Create an alert

Configure the policy to email your email when jumphost is cpu utilization is above 50% for 1 min.


Task 3: Verify the Spinnaker deployment

Use cloudshell and run

gcloud config set compute/zone us-east1-b

gcloud container clusters get-credentials spinnaker-tutorial

DECK_POD=$(kubectl get pods --namespace default -l "cluster=spin-deck" -o jsonpath="{.items[0].metadata.name}")

kubectl port-forward --namespace default $DECK_POD 8080:9000 >> /dev/null &





Go to cloudshell webpreview and go to applications->sample

Open pipelines and manually run the pipeline if it has not already running.  Approve the deployment to production.  Check the production frontend endpoint (use http, not the default https)

Back in cloudshell run these commands to push a change





gcloud config set compute/zone us-east1-b

gcloud source repos clone sample-app

cd sample-app

touch a

git config --global user.email "$(gcloud config get-value account)"

git config --global user.name "Student"

git commit -a -m "change"

git tag v1.0.1

git push --tags


-----------------------------x-----------------------------------------x--------------------------------------------x---------------------------------------x--------------------------